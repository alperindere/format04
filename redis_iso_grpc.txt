import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.stub.StreamObserver;
import redis.clients.jedis.Jedis;

import javax.annotation.PostConstruct;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;

@SpringBootApplication
public class TcpToRedisGrpcApplication {
    private static final String REDIS_QUEUE_KEY = "grpc_tcp_messages_queue";
    private static final int PORT = 12345;  // TCP/IP port
    private static final int GRPC_PORT = 50051;  // gRPC server port

    public static void main(String[] args) {
        SpringApplication.run(TcpToRedisGrpcApplication.class, args);
    }

    @PostConstruct
    public void startTcpListener() throws Exception {
        // Redis bağlantısı oluştur
        Jedis jedis = new Jedis("localhost");  // Redis sunucu adresi

        // gRPC sunucusunu başlat
        Server grpcServer = ServerBuilder.forPort(GRPC_PORT)
                .addService(new GrpcMessageService(jedis))
                .build()
                .start();
        System.out.println("gRPC sunucusu port " + GRPC_PORT + " üzerinde çalışıyor...");

        // TCP/IP soket dinleme işlemi
        new Thread(() -> {
            try (ServerSocket serverSocket = new ServerSocket(PORT)) {
                System.out.println("TCP/IP port " + PORT + " dinleniyor...");

                while (true) {
                    Socket clientSocket = serverSocket.accept();
                    System.out.println("Yeni bir bağlantı kabul edildi: " + clientSocket.getInetAddress());

                    // Mesajı oku
                    BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                    String incomingMessage;
                    while ((incomingMessage = in.readLine()) != null) {
                        System.out.println("Gelen Mesaj: " + incomingMessage);
                        // gRPC üzerinden mesajı Redis'e gönder
                        GrpcMessageService.sendMessageToRedis(incomingMessage);
                    }
                    clientSocket.close();
                    System.out.println("Bağlantı sonlandırıldı.");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();

        // gRPC sunucusunu beklet
        grpcServer.awaitTermination();
    }

    @RestController
    static class GrpcMessageService extends MessageServiceGrpc.MessageServiceImplBase {
        private static Jedis redisClient;

        public GrpcMessageService(Jedis jedis) {
            redisClient = jedis;
        }

        @Override
        public void sendMessage(MessageRequest request, StreamObserver<MessageResponse> responseObserver) {
            String message = request.getMessage();
            try {
                redisClient.rpush(REDIS_QUEUE_KEY, message);
                System.out.println("Mesaj Redis kuyruğuna bırakıldı: " + message);
                MessageResponse response = MessageResponse.newBuilder()
                        .setStatus("Mesaj başarıyla kuyruğa bırakıldı")
                        .build();
                responseObserver.onNext(response);
                responseObserver.onCompleted();
            } catch (Exception e) {
                e.printStackTrace();
                responseObserver.onError(e);
            }
        }

        public static void sendMessageToRedis(String message) {
            // gRPC sunucusu üzerinden gelen mesajı Redis'e bırakma
            MessageRequest request = MessageRequest.newBuilder().setMessage(message).build();
            MessageServiceGrpc.MessageServiceStub asyncStub = MessageServiceGrpc.newStub(null);
            asyncStub.sendMessage(request, new StreamObserver<MessageResponse>() {
                @Override
                public void onNext(MessageResponse value) {
                    System.out.println(value.getStatus());
                }

                @Override
                public void onError(Throwable t) {
                    t.printStackTrace();
                }

                @Override
                public void onCompleted() {
                    System.out.println("Mesaj gönderimi tamamlandı.");
                }
            });
        }
    }
}
